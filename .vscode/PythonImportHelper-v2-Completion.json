[
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "doQuery",
        "importPath": "modules.fn",
        "description": "modules.fn",
        "isExtraImport": true,
        "detail": "modules.fn",
        "documentation": {}
    },
    {
        "label": "doQuery",
        "importPath": "modules.fn",
        "description": "modules.fn",
        "isExtraImport": true,
        "detail": "modules.fn",
        "documentation": {}
    },
    {
        "label": "doQuery",
        "importPath": "modules.fn",
        "description": "modules.fn",
        "isExtraImport": true,
        "detail": "modules.fn",
        "documentation": {}
    },
    {
        "label": "getAllPosts",
        "importPath": "modules.fn",
        "description": "modules.fn",
        "isExtraImport": true,
        "detail": "modules.fn",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "psycopg2.pool",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2.pool",
        "description": "psycopg2.pool",
        "detail": "psycopg2.pool",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Cookie",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "Jinja2Templates",
        "importPath": "fastapi.templating",
        "description": "fastapi.templating",
        "isExtraImport": true,
        "detail": "fastapi.templating",
        "documentation": {}
    },
    {
        "label": "encodeEmbedding",
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "isExtraImport": true,
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "getSemanticSearchResult",
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "isExtraImport": true,
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "semanticSearch",
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "isExtraImport": true,
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "summarize",
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "isExtraImport": true,
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "modules.auth",
        "description": "modules.auth",
        "isExtraImport": true,
        "detail": "modules.auth",
        "documentation": {}
    },
    {
        "label": "signup",
        "importPath": "modules.auth",
        "description": "modules.auth",
        "isExtraImport": true,
        "detail": "modules.auth",
        "documentation": {}
    },
    {
        "label": "SemanticSearchResult",
        "kind": 6,
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "peekOfCode": "class SemanticSearchResult(BaseModel):\n    id: int\n    content: str\n    username: str\n    full_name: str\n    avatar: str\ndef semanticSearch(text: str, limit: int = 10):\n    vec = encodeEmbedding(text)\n    rows: List[SemanticSearchResult] = doQuery(\n        \"SELECT posts.id, posts.content, users_auth.username, users_auth.full_name, users_auth.avatar FROM posts JOIN users_auth ON users_auth.username = posts.username ORDER BY posts.content_vec <-> %s LIMIT %s;\",",
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "translate",
        "kind": 2,
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "peekOfCode": "def translate(s: str, lang: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\"role\": \"system\",\n                \"content\": \"you are a translator that translate input to \" + lang},\n            {\"role\": \"user\", \"content\": s}\n        ]\n    )\n    return (completion.choices[0].message.content)",
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "summarize",
        "kind": 2,
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "peekOfCode": "def summarize(s: str) -> str:\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a summarizer that summarize the text. \\\n                Limit to under 200 words.\"},\n            {\"role\": \"user\", \"content\": s}\n        ]",
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "arrayToString",
        "kind": 2,
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "peekOfCode": "def arrayToString(array):\n    s = \"[\"\n    for i in range(len(array)):\n        s += str(array[i]) + \",\"\n    s = s[:-1] + \"]\"\n    return s\ndef stringToArray(s):\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.split(\",\")",
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "stringToArray",
        "kind": 2,
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "peekOfCode": "def stringToArray(s):\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.split(\",\")\n    v1 = [float(i) for i in s]\n    return v1\ndef encodeEmbedding(sentence: str):\n    return arrayToString(model.encode(sentence))\ndef cosineSimilarity(vec1, vec2):\n    return torch.nn.functional.cosine_similarity(vec1, vec2)",
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "encodeEmbedding",
        "kind": 2,
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "peekOfCode": "def encodeEmbedding(sentence: str):\n    return arrayToString(model.encode(sentence))\ndef cosineSimilarity(vec1, vec2):\n    return torch.nn.functional.cosine_similarity(vec1, vec2)\nclass SemanticSearchResult(BaseModel):\n    id: int\n    content: str\n    username: str\n    full_name: str\n    avatar: str",
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "cosineSimilarity",
        "kind": 2,
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "peekOfCode": "def cosineSimilarity(vec1, vec2):\n    return torch.nn.functional.cosine_similarity(vec1, vec2)\nclass SemanticSearchResult(BaseModel):\n    id: int\n    content: str\n    username: str\n    full_name: str\n    avatar: str\ndef semanticSearch(text: str, limit: int = 10):\n    vec = encodeEmbedding(text)",
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "semanticSearch",
        "kind": 2,
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "peekOfCode": "def semanticSearch(text: str, limit: int = 10):\n    vec = encodeEmbedding(text)\n    rows: List[SemanticSearchResult] = doQuery(\n        \"SELECT posts.id, posts.content, users_auth.username, users_auth.full_name, users_auth.avatar FROM posts JOIN users_auth ON users_auth.username = posts.username ORDER BY posts.content_vec <-> %s LIMIT %s;\",\n        (vec, limit)\n    )\n    return rows\ndef getSemanticSearchResult(text: str, limit: int, page: int):\n    rows = semanticSearch(text, limit)\n    html = \"\"",
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "getSemanticSearchResult",
        "kind": 2,
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "peekOfCode": "def getSemanticSearchResult(text: str, limit: int, page: int):\n    rows = semanticSearch(text, limit)\n    html = \"\"\n    for row in rows:\n        html += f\"\"\"\n          <div class=\"post\">\n            <v-profile\n            fullname=\"{row.full_name}\" \n            handler=\"{row.username}\"\n            avatar=\"{row.avatar}\"",
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "TRANSFORMER_MODEL",
        "kind": 5,
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "peekOfCode": "TRANSFORMER_MODEL = os.getenv('TRANSFORMER_MODEL')\nmodel = SentenceTransformer(TRANSFORMER_MODEL)\nopenaimodel = os.getenv('OPENAI_MODEL') or \"gpt-4o-mini\"\nclient = OpenAI(api_key=os.getenv('OPENAI_KEY'))\ndef translate(s: str, lang: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\"role\": \"system\",\n                \"content\": \"you are a translator that translate input to \" + lang},",
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "peekOfCode": "model = SentenceTransformer(TRANSFORMER_MODEL)\nopenaimodel = os.getenv('OPENAI_MODEL') or \"gpt-4o-mini\"\nclient = OpenAI(api_key=os.getenv('OPENAI_KEY'))\ndef translate(s: str, lang: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\"role\": \"system\",\n                \"content\": \"you are a translator that translate input to \" + lang},\n            {\"role\": \"user\", \"content\": s}",
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "openaimodel",
        "kind": 5,
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "peekOfCode": "openaimodel = os.getenv('OPENAI_MODEL') or \"gpt-4o-mini\"\nclient = OpenAI(api_key=os.getenv('OPENAI_KEY'))\ndef translate(s: str, lang: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\"role\": \"system\",\n                \"content\": \"you are a translator that translate input to \" + lang},\n            {\"role\": \"user\", \"content\": s}\n        ]",
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "modules.ai_model",
        "description": "modules.ai_model",
        "peekOfCode": "client = OpenAI(api_key=os.getenv('OPENAI_KEY'))\ndef translate(s: str, lang: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\"role\": \"system\",\n                \"content\": \"you are a translator that translate input to \" + lang},\n            {\"role\": \"user\", \"content\": s}\n        ]\n    )",
        "detail": "modules.ai_model",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "modules.auth",
        "description": "modules.auth",
        "peekOfCode": "def login(username: str, password: str):\n    hashed_password = hash_password(password)\n    sql = \"SELECT username,role,full_name,avatar FROM users_auth WHERE username = %s AND password = %s\"\n    params = (username, hashed_password)\n    rows = doQuery(sql, params)\n    if len(rows):\n        return {\n            \"message\": \"Login Success !\",\n        }\n    else:",
        "detail": "modules.auth",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "modules.auth",
        "description": "modules.auth",
        "peekOfCode": "def hash_password(password: str):\n    # Generate a salt and hash the password\n    # bcrypt.gensalt()\n    salt = SALT.encode('utf-8')\n    hashed_password = bcrypt.hashpw(\n        password.encode('utf-8'), salt)\n    return hashed_password.decode('utf-8')\ndef signup(username: str, password: str, avatar: str, fullname: str):\n    # check if user already exists\n    sql = \"SELECT username FROM users_auth WHERE username = %s\"",
        "detail": "modules.auth",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "modules.auth",
        "description": "modules.auth",
        "peekOfCode": "def signup(username: str, password: str, avatar: str, fullname: str):\n    # check if user already exists\n    sql = \"SELECT username FROM users_auth WHERE username = %s\"\n    params = (username,)\n    rows = doQuery(sql, params)\n    if len(rows):\n        return {\"message\": \"User Already Exists !\"}\n    hashed_password = hash_password(password)\n    sql = \"INSERT INTO \\\"users_auth\\\" (username, password, full_name, avatar, role) VALUES (%s, %s, %s, %s, 'user');\"\n    params = (username, hashed_password, fullname, avatar)",
        "detail": "modules.auth",
        "documentation": {}
    },
    {
        "label": "POSTGRES_HOSTNAME",
        "kind": 5,
        "importPath": "modules.auth",
        "description": "modules.auth",
        "peekOfCode": "POSTGRES_HOSTNAME = os.getenv(\"POSTGRES_HOSTNAME\")\nPOSTGRES_PASSWORD = os.getenv(\"POSTGRES_PASSWORD\")\nPOSTGRES_USER = os.getenv(\"POSTGRES_USER\")\nPOSTGRES_DATABASE = os.getenv(\"POSTGRES_DATABASE\")\nPOSTGRES_PORT = os.getenv(\"POSTGRES_PORT\")\nSALT = os.getenv(\"SALT\")\ndef login(username: str, password: str):\n    hashed_password = hash_password(password)\n    sql = \"SELECT username,role,full_name,avatar FROM users_auth WHERE username = %s AND password = %s\"\n    params = (username, hashed_password)",
        "detail": "modules.auth",
        "documentation": {}
    },
    {
        "label": "POSTGRES_PASSWORD",
        "kind": 5,
        "importPath": "modules.auth",
        "description": "modules.auth",
        "peekOfCode": "POSTGRES_PASSWORD = os.getenv(\"POSTGRES_PASSWORD\")\nPOSTGRES_USER = os.getenv(\"POSTGRES_USER\")\nPOSTGRES_DATABASE = os.getenv(\"POSTGRES_DATABASE\")\nPOSTGRES_PORT = os.getenv(\"POSTGRES_PORT\")\nSALT = os.getenv(\"SALT\")\ndef login(username: str, password: str):\n    hashed_password = hash_password(password)\n    sql = \"SELECT username,role,full_name,avatar FROM users_auth WHERE username = %s AND password = %s\"\n    params = (username, hashed_password)\n    rows = doQuery(sql, params)",
        "detail": "modules.auth",
        "documentation": {}
    },
    {
        "label": "POSTGRES_USER",
        "kind": 5,
        "importPath": "modules.auth",
        "description": "modules.auth",
        "peekOfCode": "POSTGRES_USER = os.getenv(\"POSTGRES_USER\")\nPOSTGRES_DATABASE = os.getenv(\"POSTGRES_DATABASE\")\nPOSTGRES_PORT = os.getenv(\"POSTGRES_PORT\")\nSALT = os.getenv(\"SALT\")\ndef login(username: str, password: str):\n    hashed_password = hash_password(password)\n    sql = \"SELECT username,role,full_name,avatar FROM users_auth WHERE username = %s AND password = %s\"\n    params = (username, hashed_password)\n    rows = doQuery(sql, params)\n    if len(rows):",
        "detail": "modules.auth",
        "documentation": {}
    },
    {
        "label": "POSTGRES_DATABASE",
        "kind": 5,
        "importPath": "modules.auth",
        "description": "modules.auth",
        "peekOfCode": "POSTGRES_DATABASE = os.getenv(\"POSTGRES_DATABASE\")\nPOSTGRES_PORT = os.getenv(\"POSTGRES_PORT\")\nSALT = os.getenv(\"SALT\")\ndef login(username: str, password: str):\n    hashed_password = hash_password(password)\n    sql = \"SELECT username,role,full_name,avatar FROM users_auth WHERE username = %s AND password = %s\"\n    params = (username, hashed_password)\n    rows = doQuery(sql, params)\n    if len(rows):\n        return {",
        "detail": "modules.auth",
        "documentation": {}
    },
    {
        "label": "POSTGRES_PORT",
        "kind": 5,
        "importPath": "modules.auth",
        "description": "modules.auth",
        "peekOfCode": "POSTGRES_PORT = os.getenv(\"POSTGRES_PORT\")\nSALT = os.getenv(\"SALT\")\ndef login(username: str, password: str):\n    hashed_password = hash_password(password)\n    sql = \"SELECT username,role,full_name,avatar FROM users_auth WHERE username = %s AND password = %s\"\n    params = (username, hashed_password)\n    rows = doQuery(sql, params)\n    if len(rows):\n        return {\n            \"message\": \"Login Success !\",",
        "detail": "modules.auth",
        "documentation": {}
    },
    {
        "label": "SALT",
        "kind": 5,
        "importPath": "modules.auth",
        "description": "modules.auth",
        "peekOfCode": "SALT = os.getenv(\"SALT\")\ndef login(username: str, password: str):\n    hashed_password = hash_password(password)\n    sql = \"SELECT username,role,full_name,avatar FROM users_auth WHERE username = %s AND password = %s\"\n    params = (username, hashed_password)\n    rows = doQuery(sql, params)\n    if len(rows):\n        return {\n            \"message\": \"Login Success !\",\n        }",
        "detail": "modules.auth",
        "documentation": {}
    },
    {
        "label": "SQLRecord",
        "kind": 6,
        "importPath": "modules.fn",
        "description": "modules.fn",
        "peekOfCode": "class SQLRecord:\n    def __init__(self, **kwargs):\n        for key, value in kwargs.items():\n            setattr(self, key, value)\ndef doQuery(sql, params=None):\n    \"\"\"\n    Executes an SQL query with the provided parameters and returns results as instances of Record class.\n    Parameters:\n        sql (str): The SQL query to execute.\n        params (tuple): Optional tuple of parameters to pass with the query.",
        "detail": "modules.fn",
        "documentation": {}
    },
    {
        "label": "get_connection",
        "kind": 2,
        "importPath": "modules.fn",
        "description": "modules.fn",
        "peekOfCode": "def get_connection():\n    try:\n        # Get a connection from the pool\n        connection = connection_pool.getconn()\n        return connection\n    except Exception as e:\n        print(f\"Error getting connection from pool: {e}\")\n        return None\ndef release_connection(connection):\n    try:",
        "detail": "modules.fn",
        "documentation": {}
    },
    {
        "label": "release_connection",
        "kind": 2,
        "importPath": "modules.fn",
        "description": "modules.fn",
        "peekOfCode": "def release_connection(connection):\n    try:\n        # Release the connection back to the pool\n        if connection:\n            connection_pool.putconn(connection)\n    except Exception as e:\n        print(f\"Error releasing connection back to pool: {e}\")\n# Initialize the connection pool\nconnection_pool = psycopg2.pool.SimpleConnectionPool(\n    minconn=1,  # Minimum number of connections",
        "detail": "modules.fn",
        "documentation": {}
    },
    {
        "label": "doQuery",
        "kind": 2,
        "importPath": "modules.fn",
        "description": "modules.fn",
        "peekOfCode": "def doQuery(sql, params=None):\n    \"\"\"\n    Executes an SQL query with the provided parameters and returns results as instances of Record class.\n    Parameters:\n        sql (str): The SQL query to execute.\n        params (tuple): Optional tuple of parameters to pass with the query.\n    Returns:\n        list: Query results as a list of Record instances.\n    Example for a SELECT query:\n    ```",
        "detail": "modules.fn",
        "documentation": {}
    },
    {
        "label": "getAllPosts",
        "kind": 2,
        "importPath": "modules.fn",
        "description": "modules.fn",
        "peekOfCode": "def getAllPosts():\n    sql = \"SELECT posts.content, users_auth.full_name, users_auth.username, users_auth.avatar FROM posts JOIN users_auth ON posts.username = users_auth.username ORDER BY posts.created_at DESC LIMIT 10;\"\n    rows = doQuery(sql, ())\n    html = \"\"\n    for row in rows:\n        html += f\"\"\"\n          <div class=\"post\">\n            <v-profile\n            fullname=\"{row.full_name}\" \n            handler=\"{row.username}\"",
        "detail": "modules.fn",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "modules.fn",
        "description": "modules.fn",
        "peekOfCode": "url = os.getenv(\"SUPABASE_URL\")\nkey = os.getenv(\"SUPABASE_SERVICE_KEY\")\n# Database configuration\nDATABASE_CONFIG = {\n    \"dbname\": os.getenv(\"POSTGRES_DATABASE\"),\n    \"user\": os.getenv(\"POSTGRES_USER\"),\n    \"password\": os.getenv(\"POSTGRES_PASSWORD\"),\n    \"host\": os.getenv(\"POSTGRES_HOSTNAME\"),\n    \"port\": os.getenv(\"POSTGRES_PORT\"),\n}",
        "detail": "modules.fn",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "modules.fn",
        "description": "modules.fn",
        "peekOfCode": "key = os.getenv(\"SUPABASE_SERVICE_KEY\")\n# Database configuration\nDATABASE_CONFIG = {\n    \"dbname\": os.getenv(\"POSTGRES_DATABASE\"),\n    \"user\": os.getenv(\"POSTGRES_USER\"),\n    \"password\": os.getenv(\"POSTGRES_PASSWORD\"),\n    \"host\": os.getenv(\"POSTGRES_HOSTNAME\"),\n    \"port\": os.getenv(\"POSTGRES_PORT\"),\n}\ndef get_connection():",
        "detail": "modules.fn",
        "documentation": {}
    },
    {
        "label": "DATABASE_CONFIG",
        "kind": 5,
        "importPath": "modules.fn",
        "description": "modules.fn",
        "peekOfCode": "DATABASE_CONFIG = {\n    \"dbname\": os.getenv(\"POSTGRES_DATABASE\"),\n    \"user\": os.getenv(\"POSTGRES_USER\"),\n    \"password\": os.getenv(\"POSTGRES_PASSWORD\"),\n    \"host\": os.getenv(\"POSTGRES_HOSTNAME\"),\n    \"port\": os.getenv(\"POSTGRES_PORT\"),\n}\ndef get_connection():\n    try:\n        # Get a connection from the pool",
        "detail": "modules.fn",
        "documentation": {}
    },
    {
        "label": "connection_pool",
        "kind": 5,
        "importPath": "modules.fn",
        "description": "modules.fn",
        "peekOfCode": "connection_pool = psycopg2.pool.SimpleConnectionPool(\n    minconn=1,  # Minimum number of connections\n    maxconn=10,  # Maximum number of connections\n    **DATABASE_CONFIG\n)\nclass SQLRecord:\n    def __init__(self, **kwargs):\n        for key, value in kwargs.items():\n            setattr(self, key, value)\ndef doQuery(sql, params=None):",
        "detail": "modules.fn",
        "documentation": {}
    },
    {
        "label": "CookieData",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class CookieData(BaseModel):\n    key: str\n    value: str\n_1week = 6134400\n@app.get(\"/test\")\nasync def test():\n    rows = semanticSearch(\"Hello World\", 10)\n    return rows\nclass LoginData(BaseModel):\n    username: str",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "LoginData",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class LoginData(BaseModel):\n    username: str\n    password: str\n@app.post(\"/login\")\nasync def login_user(data: LoginData, response: Response, request: Request):\n    data = login(username=data.username, password=data.password)\n    if (data['data']):\n        response.set_cookie(key=\"data\", value=json.dumps(\n            data['data']), max_age=_1week, httponly=True)\n        return data",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "PostData",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class PostData(BaseModel):\n    content: str\n@app.post(\"/post\")\nasync def post(data: PostData, response: Response, request: Request):\n    content = data.content\n    summary = summarize(content)\n    vector = encodeEmbedding(summary)\n    cookie = request.cookies.get(\"data\")\n    if (cookie):\n        data_json = json.loads(cookie)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "SignupData",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class SignupData(BaseModel):\n    username: str\n    password: str\n    avatar: str\n    full_name: str\n@app.post(\"/signup\")\nasync def signup_user(data: SignupData, response: Response):\n    username = data.username\n    password = data.password\n    avatar = data.avatar",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "UserData",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class UserData(BaseModel):\n    handler: str\n    full_name: str\n    avatar: str\n@app.get(\"/\", response_class=HTMLResponse)\nasync def read_root(request: Request):\n    posts = getAllPosts()\n    cookie = request.cookies.get(\"data\")\n    data = UserData(handler=\"\", full_name=\"\", avatar=\"\")\n    if (cookie):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.mount(\"/assets\", StaticFiles(directory=\"assets\"), name=\"assets\")\ntemplates = Jinja2Templates(directory=\"templates\")\n# CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "templates",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "templates = Jinja2Templates(directory=\"templates\")\n# CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\nclass CookieData(BaseModel):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "_1week",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "_1week = 6134400\n@app.get(\"/test\")\nasync def test():\n    rows = semanticSearch(\"Hello World\", 10)\n    return rows\nclass LoginData(BaseModel):\n    username: str\n    password: str\n@app.post(\"/login\")\nasync def login_user(data: LoginData, response: Response, request: Request):",
        "detail": "main",
        "documentation": {}
    }
]